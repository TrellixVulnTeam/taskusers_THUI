{"ast":null,"code":"var _jsxFileName = \"/home/ivanferrer/projetos/task-users/frontend/task-users/src/components/user/CrudTests.jsx\";\nimport React, { Component } from 'react';\nimport Main from '../templates/Main';\nimport axios from 'axios';\nimport Form from '../utils/Form';\nimport './CrudTests.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst headerProps = {\n  icon: 'tasks',\n  title: 'Testes',\n  subtitle: 'Painel de testes'\n};\nconst baseUrl = 'http://localhost:3001/persons';\nconst initialState = {\n  connected: false,\n  nextConnectionTry: 0,\n  user: {\n    Name: '',\n    Description: '',\n    ID_User: 0\n  },\n  list: []\n};\nexport default class UserCrud extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...initialState\n    };\n  }\n\n  componentWillMount() {\n    //Ainda sera necessario fazer a conexão quando o componente for montado, solicitando a lista de usuarios\n    //this.props.setConnection(\"Disconnected\", \"Connecting...\") //Loading while not connected\n    this.verifyConnection(); //Verify connection\n\n    console.log(this.props);\n  }\n\n  async verifyConnection() {\n    //console.log(this.state.nextConnectionTry)\n    if (this.state.nextConnectionTry === 0) {\n      //this.props.setConnection(\"Disconnected\", \"Connecting...\")\n      await axios(baseUrl).then(resp => {\n        //console.log(\"!\")\n        this.setState({\n          connected: true,\n          list: resp.data\n        }); //this.props.setConnection(\"Connected\", \"Connected\")\n\n        return true;\n      }).catch(err => {\n        this.setState({\n          connected: false,\n          list: []\n        });\n        console.log(err);\n        this.props.setConnection(\"Disconnected\", \"Server offline.\");\n        setTimeout(() => this.verifyConnection(), 10000); // after 10s retry connection\n\n        return false;\n      });\n    } else //this.setState( {nextConnectionTry: this.state.nextConnectionTry - 1} )\n      this.setState({\n        nextConnectionTry: 10\n      });\n\n    return false;\n  }\n\n  clear() {\n    this.setState({\n      user: initialState.user\n    });\n  }\n\n  async save() {\n    await this.verifyConnection();\n    if (!this.state.connected) return;\n    const nameForm = document.getElementById(\"nameForm\");\n    const emailForm = document.getElementById(\"emailForm\");\n\n    if (nameForm.value === '') {\n      nameForm.classList.add(\"error\");\n      nameForm.addEventListener(\"click\", () => nameForm.classList.remove(\"error\"));\n      return;\n    }\n\n    if (emailForm.value === '') {\n      emailForm.classList.add(\"error\");\n      emailForm.addEventListener(\"click\", () => emailForm.classList.remove(\"error\"));\n      return;\n    }\n\n    const user = this.state.user;\n    const method = user.ID_User ? 'put' : 'post'; //similar a axios.blablabla, porém precios usar notação com [] pois temos uma string após o \"ponto\"\n\n    axios[method](baseUrl, user).then(resp => {\n      const list = this.getUpdatedList(resp.data);\n      this.setState({\n        user: initialState.user,\n        list\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  getUpdatedList(user, add = true) {\n    const list = this.state.list.filter(u => u.ID_User !== user.ID_User);\n    if (add) list.unshift(user);\n    return list;\n  }\n\n  updateField(event) {\n    const user = { ...this.state.user\n    };\n    user[event.target.name] = event.target.value;\n    this.setState({\n      user\n    });\n  }\n\n  renderForm() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 col-md-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Nome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"nameForm\",\n              name: \"Name\",\n              value: this.state.user.Name,\n              onChange: e => this.updateField(e),\n              placeholder: \"Digite o nome aqui...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"E-mail\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"emailForm\",\n              name: \"Description\",\n              value: this.state.user.Description,\n              onChange: e => this.updateField(e),\n              placeholder: \"Digite o e-mail aqui...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12 d-flex justify-content-end\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secundary\",\n            onClick: e => this.clear(e),\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary  ml-2\",\n            onClick: e => this.save(e),\n            children: \"Salvar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n  load(user) {\n    this.setState({\n      user\n    });\n  }\n\n  remove(user) {\n    axios.delete(`${baseUrl}/${user.ID_User}`).then(resp => {\n      const list = this.getUpdatedList(user, false);\n      this.setState({\n        list\n      });\n    });\n  }\n\n  renderTable() {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table md-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"A\\xE7\\xF5es\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: this.renderRows()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderRows() {\n    return this.state.list.map(user => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: user.ID_User\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: user.Name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: user.Description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning\",\n            onClick: () => this.load(user),\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-pencil\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-danger ml-2\",\n            onClick: () => this.remove(user),\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-trash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this)]\n      }, user.ID_User, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this);\n    });\n  } //requisição GET com a API, se der sucesso ele troca o estado da aplicação para conectado\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Main, { ...headerProps,\n      children: [this.renderForm(), this.renderTable()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ivanferrer/projetos/task-users/frontend/task-users/src/components/user/CrudTests.jsx"],"names":["React","Component","Main","axios","Form","headerProps","icon","title","subtitle","baseUrl","initialState","connected","nextConnectionTry","user","Name","Description","ID_User","list","UserCrud","state","componentWillMount","verifyConnection","console","log","props","then","resp","setState","data","catch","err","setConnection","setTimeout","clear","save","nameForm","document","getElementById","emailForm","value","classList","add","addEventListener","remove","method","getUpdatedList","e","filter","u","unshift","updateField","event","target","name","renderForm","load","delete","renderTable","renderRows","map","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Main from '../templates/Main'\nimport axios from 'axios'\nimport Form from '../utils/Form'\nimport './CrudTests.scss'\n\nconst headerProps = {\n    icon: 'tasks',\n    title: 'Testes',\n    subtitle: 'Painel de testes'\n}\n\nconst baseUrl = 'http://localhost:3001/persons'\nconst initialState = {\n    connected : false,\n    nextConnectionTry: 0,\n    user: {Name:'', Description:'', ID_User:0},\n    list: []\n}\n\n\nexport default class UserCrud extends Component{\n    state = {...initialState}\n\n    \n    componentWillMount(){\n        //Ainda sera necessario fazer a conexão quando o componente for montado, solicitando a lista de usuarios\n        //this.props.setConnection(\"Disconnected\", \"Connecting...\") //Loading while not connected\n        this.verifyConnection() //Verify connection\n        console.log(this.props)\n    }\n    async verifyConnection(){\n        //console.log(this.state.nextConnectionTry)\n        if(this.state.nextConnectionTry === 0){\n            //this.props.setConnection(\"Disconnected\", \"Connecting...\")\n            await axios(baseUrl).then(resp =>{\n                //console.log(\"!\")\n                this.setState({connected: true,list: resp.data})\n                //this.props.setConnection(\"Connected\", \"Connected\")\n                return true;\n            }).catch(err=>{\n                this.setState({connected: false, list: []})\n                console.log(err)\n                this.props.setConnection(\"Disconnected\", \"Server offline.\")\n                setTimeout(() => this.verifyConnection(), 10000)// after 10s retry connection\n                return false;\n            })\n        }else\n            //this.setState( {nextConnectionTry: this.state.nextConnectionTry - 1} )\n            this.setState( {nextConnectionTry: 10} )\n            return false;\n    }\n    \n\n    clear(){\n        this.setState({user: initialState.user})\n    }\n\n\n    async save(){\n        await this.verifyConnection()\n        if(!this.state.connected) return\n\n        const nameForm = document.getElementById(\"nameForm\")\n        const emailForm = document.getElementById(\"emailForm\")\n        if(nameForm.value === ''){\n            nameForm.classList.add(\"error\")\n            nameForm.addEventListener(\"click\", () => nameForm.classList.remove(\"error\"))\n            return}\n        if(emailForm.value === ''){\n            emailForm.classList.add(\"error\")\n            emailForm.addEventListener(\"click\", () => emailForm.classList.remove(\"error\"))\n            return}\n\n        const user = this.state.user\n        const method = user.ID_User ? 'put' : 'post'\n        //similar a axios.blablabla, porém precios usar notação com [] pois temos uma string após o \"ponto\"\n        axios[method](baseUrl, user).then(resp => {\n            const list = this.getUpdatedList(resp.data)\n\n            this.setState({user:initialState.user, list})\n        }).catch(e=>{\n            console.log(e)\n        })\n    }\n    getUpdatedList(user, add = true){\n        const list = this.state.list.filter(u => u.ID_User !== user.ID_User)\n        if(add)\n                list.unshift(user)\n\n        return list\n    }\n\n    updateField(event){\n        const user = {...this.state.user}\n        user[event.target.name] = event.target.value\n        this.setState({user})\n    }\n\n    renderForm(){\n        return(\n            <div className=\"form\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-3\">\n                        <div className=\"form-group\">\n                            <label>Nome</label>\n                            <input type=\"text\" className=\"form-control\" id='nameForm'\n                            name=\"Name\" value={this.state.user.Name}\n                            onChange={e=>this.updateField(e)}\n                            placeholder=\"Digite o nome aqui...\"/>\n                        </div>\n                    </div>\n                    \n                    <div className=\"col-12 col-md-6\">\n                        <div className=\"form-group\">\n                            <label>E-mail</label>\n                            <input type=\"text\" className=\"form-control\" id='emailForm'\n                            name=\"Description\" value={this.state.user.Description}\n                            onChange={e=>this.updateField(e)}\n                            placeholder=\"Digite o e-mail aqui...\"/>\n                        </div>\n                    </div>\n                </div>\n                <hr/>\n                <div className=\"row\">\n                    <div className=\"col-12 d-flex justify-content-end\">\n                        <button className=\"btn btn-secundary\" onClick={e => this.clear(e)}>\n                            Cancelar\n                        </button>\n                        <button className=\"btn btn-primary  ml-2\" onClick={e => this.save(e)}>\n                            Salvar\n                        </button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    load(user){\n        this.setState({user})\n    }\n\n    remove(user){\n        axios.delete(`${baseUrl}/${user.ID_User}`).then(resp => {\n            const list = this.getUpdatedList(user, false)\n            this.setState({list})\n        })\n    }\n    renderTable(){\n        return(\n            <table className=\"table md-4\">\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Nome</th>\n                        <th>Email</th>\n                        <th>Ações</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderRows()}\n                </tbody>\n            </table>\n        )\n    }\n    renderRows(){\n        return this.state.list.map(user=>{\n            return(\n                <tr key={user.ID_User}>\n                    <td>{user.ID_User}</td>\n                    <td>{user.Name}</td>\n                    <td>{user.Description}</td>\n                    <td>\n                        <button className=\"btn btn-warning\" onClick={() => this.load(user)}>\n                            <i className=\"fa fa-pencil\"></i>\n                        </button>\n                        <button className=\"btn btn-danger ml-2\" onClick={() => this.remove(user)}>\n                            <i className=\"fa fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            )\n        })\n    }\n    \n    //requisição GET com a API, se der sucesso ele troca o estado da aplicação para conectado\n\n    render(){\n        return(\n        <Main {...headerProps}>\n            {this.renderForm()}\n            {this.renderTable()}\n        </Main>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}