{"ast":null,"code":"import _objectSpread from\"/home/ivanferrer/projetos/taskusers/resources/js/frontend/task-users/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/home/ivanferrer/projetos/taskusers/resources/js/frontend/task-users/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/ivanferrer/projetos/taskusers/resources/js/frontend/task-users/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/ivanferrer/projetos/taskusers/resources/js/frontend/task-users/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/ivanferrer/projetos/taskusers/resources/js/frontend/task-users/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import'bootstrap/dist/css/bootstrap.min.css';import'font-awesome/css/font-awesome.min.css';import'./TaskApp.scss';import React,{Component}from'react';import{BrowserRouter}from'react-router-dom';//      {HashRouter} faz a mesma navegação usando # \nimport Routes from'./Routes';import Logo from'../components/templates/Logo';import Footer from'../components/templates/Footer';import Nav from'../components/templates/Nav';import Overlay from'../components/templates/Overlay';import axios from'axios';import Toast from'../components/utils/Toast';import baseUrl from'../config/baseUrl';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var baseUrlBackend=\"\".concat(baseUrl.baseUrlBackend);var TaskApp=/*#__PURE__*/function(_Component){_inherits(TaskApp,_Component);var _super=_createSuper(TaskApp);function TaskApp(props){var _this;_classCallCheck(this,TaskApp);_this=_super.call(this,props);_this.newToast=function(message){_this.setState({toastMessage:message});_this.child.current.show();};_this.state={// connection: \"Disconnected\",\n// connectionDescription: \"Connecting...\",\n// setConnection: this.setConnection.bind(this),\n// nextConnectionTry: 0,\n// authenticated: false,\nisFinite:true,listTasks:[],listUsers:[]};return _this;}_createClass(TaskApp,[{key:\"setConnection\",value:function setConnection(connection,connectionDescription){//If connection is !== of Connected, overlay pop up (Check overlay component)\nthis.setState({connection:connection,connectionDescription:connectionDescription});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// let token = localStorage.getItem('SessionToken')\n// var headers = {\n//     'Authorization': `bearer ${token}`\n// }\nvar headers={\"Access-Control-Allow-Origin\":\"\".concat(baseUrlBackend),\"Access-Control-Allow-Headers\":\"*\",//\"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, PATCH, DELETE\" ,\n\"Access-Control-Allow-Methods\":\"GET, POST\",\"Access-Control-Max-Age\":\"86400\",\"Content-Type\":\"application/json;charset=UTF-8\"};var params={all:true};axios.post(\"\".concat(baseUrlBackend,\"/list/task\"),params,headers).then(function(response){_this2.setState({listTasks:response.data.listTasks});}).catch(function(err){if(err.response){if(err.response.status===401){_this2.newToast('Problemas na requisição');}else{_this2.newToast('Ocorreu um erro de conexão');}}//             console.log('a')\n//             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n//         }else{\n//             console.log('b')\n//             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n//         }\n//     }else\n//     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n// })\n});axios.post(\"\".concat(baseUrlBackend,\"/list/user\"),params,headers).then(function(response){_this2.setState({listUsers:response.data.listUsers});}).catch(function(err){if(err.response){if(err.response.status===401){_this2.newToast('Problemas na requisição');}else{_this2.newToast('Ocorreu um erro de conexão');}}//             console.log('a')\n//             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n//         }else{\n//             console.log('b')\n//             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n//         }\n//     }else\n//     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n// })\n});// axios.post(`${baseUrlBackend}auth`,'', {headers: headers} ).then(response => {//pass token as header\n//     console.log(response)\n//     this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated: true} )//Connected AND authenticated\n// }).catch(err => {\n//     console.log(err)\n//     if(err.response){\n//         if(err.response.status === 401){\n//             console.log('a')\n//             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n//         }else{\n//             console.log('b')\n//             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n//         }\n//     }else\n//     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n// })\n}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"task-app\",children:[/*#__PURE__*/_jsx(Overlay,_objectSpread({},this.state)),/*#__PURE__*/_jsx(Logo,{}),/*#__PURE__*/_jsx(Nav,_objectSpread({},this.state)),/*#__PURE__*/_jsx(Routes,_objectSpread({},this.state)),/*#__PURE__*/_jsx(Footer,{})]})});}}]);return TaskApp;}(Component);export{TaskApp as default};","map":{"version":3,"sources":["/home/ivanferrer/projetos/taskusers/resources/js/frontend/task-users/src/maintasks/TaskApp.jsx"],"names":["React","Component","BrowserRouter","Routes","Logo","Footer","Nav","Overlay","axios","Toast","baseUrl","baseUrlBackend","TaskApp","props","newToast","message","setState","toastMessage","child","current","show","state","isFinite","listTasks","listUsers","connection","connectionDescription","headers","params","all","post","then","response","data","catch","err","status"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport './TaskApp.scss'\nimport React, {Component} from 'react'\nimport {BrowserRouter} from 'react-router-dom'\n//      {HashRouter} faz a mesma navegação usando # \n\nimport Routes from './Routes'\nimport Logo from '../components/templates/Logo'\nimport Footer from '../components/templates/Footer'\nimport Nav from '../components/templates/Nav'\nimport Overlay from '../components/templates/Overlay'\nimport axios from 'axios'\nimport Toast from '../components/utils/Toast'\nimport baseUrl from '../config/baseUrl'\n\nconst baseUrlBackend = `${baseUrl.baseUrlBackend}`\n\nexport default class TaskApp extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            // connection: \"Disconnected\",\n            // connectionDescription: \"Connecting...\",\n            // setConnection: this.setConnection.bind(this),\n            // nextConnectionTry: 0,\n            // authenticated: false,\n\n            isFinite:true,\n            listTasks:[],\n            listUsers:[]\n        }\n    }\n    setConnection(connection, connectionDescription){ //If connection is !== of Connected, overlay pop up (Check overlay component)\n        this.setState({connection, connectionDescription})\n    }\n\n    newToast = (message) => {\n        this.setState({toastMessage:message})\n        this.child.current.show();\n    };\n\n    componentDidMount(){\n        // let token = localStorage.getItem('SessionToken')\n        // var headers = {\n        //     'Authorization': `bearer ${token}`\n        // }\n        var headers = {    \n            \"Access-Control-Allow-Origin\" : `${baseUrlBackend}`,\n            \"Access-Control-Allow-Headers\": \"*\", \n            //\"Access-Control-Allow-Methods\": \"GET, POST, OPTIONS, PUT, PATCH, DELETE\" ,\n            \"Access-Control-Allow-Methods\": \"GET, POST\" ,\n            \"Access-Control-Max-Age\": \"86400\",\n            \"Content-Type\": \"application/json;charset=UTF-8\"                   \n           }\n\n        let params = {\n            all:true\n        }\n        axios.post(`${baseUrlBackend}/list/task`, params, headers)\n        .then(response => {\n            this.setState({\n                listTasks:response.data.listTasks\n            })\n         \n        }).catch(err => {\n\n            if(err.response){\n               if (err.response.status === 401){\n                  this.newToast('Problemas na requisição')\n               } else {\n                  this.newToast('Ocorreu um erro de conexão') \n               }\n            }\n                //             console.log('a')\n                //             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n                //         }else{\n                //             console.log('b')\n                //             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n                //         }\n                //     }else\n                //     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n                // })\n\n        })\n\n        axios.post(`${baseUrlBackend}/list/user`, params, headers)\n        .then(response => {\n  \n            this.setState({\n                listUsers:response.data.listUsers\n            })\n        }).catch(err => {\n\n            if(err.response){\n               if (err.response.status === 401){\n                  this.newToast('Problemas na requisição')\n               } else {\n                  this.newToast('Ocorreu um erro de conexão') \n               }\n            }\n                //             console.log('a')\n                //             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n                //         }else{\n                //             console.log('b')\n                //             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n                //         }\n                //     }else\n                //     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n                // })\n\n        })\n        // axios.post(`${baseUrlBackend}auth`,'', {headers: headers} ).then(response => {//pass token as header\n        //     console.log(response)\n        //     this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated: true} )//Connected AND authenticated\n        // }).catch(err => {\n        //     console.log(err)\n        //     if(err.response){\n        //         if(err.response.status === 401){\n        //             console.log('a')\n        //             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n        //         }else{\n        //             console.log('b')\n        //             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n        //         }\n        //     }else\n        //     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n        // })\n    }\n  \n    render(){\n        return(\n        <BrowserRouter>\n            <div className=\"task-app\">\n                <Overlay {...this.state}/>\n                <Logo />\n                <Nav {...this.state}/>\n                <Routes {...this.state}/>\n                <Footer />\n            </div>\n        </BrowserRouter>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}