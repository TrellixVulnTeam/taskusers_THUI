{"ast":null,"code":"var _jsxFileName = \"/home/ivanferrer/projetos/task-users/frontend/task-users/src/components/registers/TaskRegister.jsx\";\nimport './TaskRegister.scss';\nimport React, { Component, Fragment, createRef } from 'react';\nimport Main from '../templates/Main';\nimport axios from 'axios';\nimport Toast from '../utils/Toast';\nimport baseUrl from '../../config/baseUrl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrlBackend = `${baseUrl.baseUrlBackend}`;\nconst headerProps = {\n  icon: 'calendar-check-o',\n  title: 'Cadastro de Tarefa',\n  subtitle: 'Preencha o formulário abaixo com as informações da tarefa.'\n};\nconst currentDate = new Date();\nexport default class TaskRegister extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newToast = message => {\n      this.setState({\n        toastMessage: message\n      }, () => {\n        this.child.current.show();\n      });\n    };\n\n    this.child = /*#__PURE__*/createRef();\n    this.state = {\n      name: props.name || \"\",\n      description: props.description || \"\",\n      startDate: props.startDate || this.formmatedCurrentDate(),\n      endDate: props.endDate || this.formmatedCurrentDate(this.addDays(currentDate, 10)),\n      isInfinite: props.isInfinite || false,\n      toastMessage: \"false\",\n      formRegister: {\n        name: {\n          label: \"Título da tarefa: \",\n          inputName: \"task\",\n          maxLength: 45\n        },\n        description: {\n          label: \"Descrição da tarefa: \",\n          inputName: \"description\",\n          maxLength: 1000\n        },\n        infinite: {\n          label: \"Infinito\",\n          inputName: \"infinite\"\n        },\n        interval: {\n          startDate: {\n            label: \"Data inicial:\",\n            inputName: \"start_date\"\n          },\n          endDate: {\n            label: \"Data final:\",\n            inputName: \"end_date\"\n          }\n        },\n        permissionSubit: false,\n        submitButton: \"Cadastrar\"\n      }\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleToggleCheck = this.handleToggleCheck.bind(this);\n    this.handleTaskNameChange = this.handleTaskNameChange.bind(this);\n    this.handleTaskDescriptionChange = this.handleTaskDescriptionChange.bind(this);\n    this.handleStartDateChange = this.handleStartDateChange.bind(this);\n    this.handleEndDateChange = this.handleEndDateChange.bind(this);\n  }\n\n  formmatedCurrentDate(theDate) {\n    const dateTime = theDate || currentDate;\n    return new Date(dateTime.getTime() - dateTime.getTimezoneOffset() * 60000).toISOString().substring(0, 19);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (this.state.name && this.state.name !== '') {\n      this.setState({\n        permissionSubit: true\n      });\n\n      if (!this.state.isInfinite) {\n        if (!this.state.startDate) {\n          this.newToast(\"A data inicial precisa ser registrada.\");\n          this.setState({\n            permissionSubit: false\n          });\n        }\n\n        if (!this.state.endDate) {\n          this.newToast(\"A data final precisa ser registrada.\");\n          this.setState({\n            permissionSubit: false\n          });\n        }\n\n        if (this.state.startDate && this.state.startDate) {\n          if (new Date(this.state.startDate).getTime() > new Date(this.state.endDate).getTime()) {\n            this.newToast(\"A data final precisa ser maior que a data inicial.\");\n            this.setState({\n              permissionSubit: false\n            });\n          }\n        }\n      } else {\n        this.setState({\n          permissionSubit: true\n        });\n      }\n\n      if (this.state.permissionSubit) {\n        let task = {\n          name: this.state.name,\n          description: this.state.description,\n          is_Infinite: this.state.isInfinite,\n          end_date: this.state.startDate,\n          start_date: this.state.endDate\n        };\n        console.log(`${baseUrlBackend}/add/task`);\n        axios.post(`${baseUrlBackend}/add/task`, task).then(resp => {\n          localStorage.setItem('SessionToken', resp.data.token);\n          this.newToast(\"Tarefa cadastrada com sucesso!\");\n          window.location.href = \"/home\";\n        }).catch(err => {\n          console.log(err.response.status);\n\n          switch (err.response.status) {\n            case 409:\n              this.newToast(\"Tarefa já cadastrada!\");\n              break;\n\n            default:\n              this.newToast(\"Ocorreu um erro com o servidor, tente novamente mais tarde.\");\n          }\n        });\n      }\n    } else {\n      if (!this.state.name) {\n        this.newToast(\"Preencha o nome da tarefa.\");\n      } else {\n        this.newToast(\"Existem campos inválidos.\");\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      isInfinite: true\n    });\n  }\n\n  handleToggleCheck() {\n    this.setState({\n      isInfinite: !this.state.isInfinite\n    });\n  }\n\n  handleTaskNameChange(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  handleTaskDescriptionChange(event) {\n    this.setState({\n      description: event.target.value\n    });\n  }\n\n  handleStartDateChange(event) {\n    this.setState({\n      startDate: event.target.value\n    });\n  }\n\n  handleEndDateChange(event) {\n    this.setState({\n      endDate: event.target.value\n    });\n  }\n\n  addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  formInterval() {\n    const {\n      formRegister,\n      startDate,\n      endDate\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: formRegister.interval.startDate.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          onChange: this.handleStartDateChange,\n          name: formRegister.interval.startDate.inputName,\n          id: formRegister.interval.startDate.inputName,\n          value: startDate,\n          min: \"2018-06-07T00:00\",\n          max: \"2018-06-14T00:00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: formRegister.interval.endDate.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          onChange: this.handleEndDateChange,\n          name: formRegister.interval.endDate.inputName,\n          id: formRegister.interval.endDate.inputName,\n          value: endDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 22\n    }, this);\n  }\n\n  render() {\n    const {\n      formRegister,\n      isInfinite,\n      name,\n      description\n    } = this.state;\n    const dateInterval = this.formInterval();\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Main, { ...headerProps,\n        children: [/*#__PURE__*/_jsxDEV(Toast, {\n          message: this.state.toastMessage,\n          time: 3000,\n          ref: this.child\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: formRegister.name.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: formRegister.name.inputName,\n              name: formRegister.name.inputName,\n              onChange: this.handleTaskNameChange,\n              type: \"text\",\n              value: name,\n              maxLength: formRegister.name.maxLength\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: formRegister.description.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: formRegister.description.inputName,\n              onChange: this.handleTaskDescriptionChange,\n              id: formRegister.description.inputName,\n              rows: \"20\",\n              cols: \"50\",\n              maxlength: formRegister.description.maxLength,\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: formRegister.infinite.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: this.handleToggleCheck,\n              value: isInfinite,\n              id: formRegister.infinite.inputName,\n              name: formRegister.infinite.inputName,\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this), isInfinite && dateInterval, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex  flex-row-reverse\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => this.handleSubmit(e),\n              children: formRegister.submitButton\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ivanferrer/projetos/task-users/frontend/task-users/src/components/registers/TaskRegister.jsx"],"names":["React","Component","Fragment","createRef","Main","axios","Toast","baseUrl","baseUrlBackend","headerProps","icon","title","subtitle","currentDate","Date","TaskRegister","constructor","props","newToast","message","setState","toastMessage","child","current","show","state","name","description","startDate","formmatedCurrentDate","endDate","addDays","isInfinite","formRegister","label","inputName","maxLength","infinite","interval","permissionSubit","submitButton","handleSubmit","bind","handleToggleCheck","handleTaskNameChange","handleTaskDescriptionChange","handleStartDateChange","handleEndDateChange","theDate","dateTime","getTime","getTimezoneOffset","toISOString","substring","e","preventDefault","task","is_Infinite","end_date","start_date","console","log","post","then","resp","localStorage","setItem","data","token","window","location","href","catch","err","response","status","componentDidMount","event","target","value","date","days","result","setDate","getDate","formInterval","render","dateInterval"],"mappings":"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","sourcesContent":["import './TaskRegister.scss'\nimport React, {Component, Fragment, createRef} from 'react'\nimport Main from '../templates/Main'\nimport axios from 'axios'\nimport Toast from '../utils/Toast';\nimport baseUrl from '../../config/baseUrl'\n\nconst baseUrlBackend = `${baseUrl.baseUrlBackend}`\n\nconst headerProps = {\n    icon: 'calendar-check-o',\n    title: 'Cadastro de Tarefa',\n    subtitle: 'Preencha o formulário abaixo com as informações da tarefa.',\n}\nconst currentDate = new Date()\n\nexport default class TaskRegister extends Component {\n    constructor(props) {\n        super(props)\n\n        this.child = createRef()\n\n        this.state = {\n            name: props.name || \"\",\n            description: props.description || \"\",\n            startDate: props.startDate || this.formmatedCurrentDate(),\n            endDate: props.endDate || this.formmatedCurrentDate(this.addDays(currentDate, 10)),\n            isInfinite: props.isInfinite || false,\n            toastMessage:\"false\",\n            formRegister:{\n                name:{\n                    label:\"Título da tarefa: \",\n                    inputName:\"task\",\n                    maxLength:45\n                },\n                description:{\n                    label:\"Descrição da tarefa: \",\n                    inputName:\"description\",\n                    maxLength:1000\n                },\n                infinite:{\n                    label: \"Infinito\",\n                    inputName:\"infinite\"\n                },\n                interval:{\n                    startDate:{\n                        label:\"Data inicial:\",\n                        inputName:\"start_date\"\n                    },\n                    endDate:{\n                        label: \"Data final:\",\n                        inputName: \"end_date\"\n                    }\n                },\n                permissionSubit:false,\n                submitButton:\"Cadastrar\"\n            }\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleToggleCheck = this.handleToggleCheck.bind(this)\n        this.handleTaskNameChange = this.handleTaskNameChange.bind(this)\n        this.handleTaskDescriptionChange = this.handleTaskDescriptionChange.bind(this)\n        this.handleStartDateChange = this.handleStartDateChange.bind(this)\n        this.handleEndDateChange = this.handleEndDateChange.bind(this)\n\n    }\n\n    formmatedCurrentDate(theDate) {\n        const dateTime = theDate || currentDate\n        return new Date(dateTime.getTime()-dateTime.getTimezoneOffset()*60000).toISOString().substring(0,19)\n    }\n\n    handleSubmit(e) {\n        e.preventDefault()\n        if(this.state.name && this.state.name !== '') {\n\n            this.setState({\n                permissionSubit:true\n            })\n\n            if(!this.state.isInfinite) {\n              \n                if(!this.state.startDate) {\n                    this.newToast(\"A data inicial precisa ser registrada.\")\n                    this.setState({\n                        permissionSubit:false\n                    })\n                }\n                if(!this.state.endDate) {\n                    this.newToast(\"A data final precisa ser registrada.\")\n                    this.setState({\n                        permissionSubit:false\n                    })\n                }\n                if(this.state.startDate && this.state.startDate) {\n                    if(new Date(this.state.startDate).getTime() > new Date(this.state.endDate).getTime()) {\n                        this.newToast(\"A data final precisa ser maior que a data inicial.\")\n                        this.setState({\n                            permissionSubit:false\n                        })\n                    }\n                }\n            } else {\n                this.setState({\n                    permissionSubit:true\n                })\n            }\n            if (this.state.permissionSubit) {\n                    let task = {\n                        name:this.state.name,\n                        description:this.state.description,\n                        is_Infinite:this.state.isInfinite,\n                        end_date:this.state.startDate,\n                        start_date:this.state.endDate\n                                        \n                    }\n                    console.log(`${baseUrlBackend}/add/task`)\n                    axios.post(`${baseUrlBackend}/add/task`,task).then(resp =>{\n                        localStorage.setItem('SessionToken', resp.data.token)\n                        this.newToast(\"Tarefa cadastrada com sucesso!\")\n                        window.location.href = \"/home\"\n                    }).catch(err => {\n                        console.log(err.response.status)\n                        switch(err.response.status){\n                            case 409: \n                            this.newToast(\"Tarefa já cadastrada!\");\n                            break\n                            default:  \n                            this.newToast(\"Ocorreu um erro com o servidor, tente novamente mais tarde.\")\n                        }\n                    })\n            } \n        } else {\n            if (!this.state.name) {\n                this.newToast(\"Preencha o nome da tarefa.\")\n            }else{\n                this.newToast(\"Existem campos inválidos.\")\n            }\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({\n            isInfinite:true\n        })\n    }\n\n    handleToggleCheck() {\n       this.setState({\n           isInfinite:!this.state.isInfinite\n       })\n    }\n\n    handleTaskNameChange(event) {\n        this.setState({name: event.target.value});\n    }\n\n    handleTaskDescriptionChange(event) {\n        this.setState({description: event.target.value});\n    }\n\n    handleStartDateChange(event) {\n        this.setState({startDate: event.target.value});\n    }\n    handleEndDateChange(event) {\n        this.setState({endDate: event.target.value});\n    }\n\n    addDays(date, days) {\n        var result = new Date(date);\n        result.setDate(result.getDate() + days);\n        return result;\n    }\n\n    newToast = (message) => {\n        this.setState({toastMessage:message}, () => {\n            this.child.current.show()\n        })\n        \n    }\n\n    formInterval() {\n        const { formRegister, startDate, endDate } = this.state\n            return  (<div>\n            <div className=\"form-control\">\n            <label>{formRegister.interval.startDate.label}</label>\n                    <input type=\"datetime-local\" onChange={this.handleStartDateChange} name={formRegister.interval.startDate.inputName} id={formRegister.interval.startDate.inputName} value={startDate} min=\"2018-06-07T00:00\" max=\"2018-06-14T00:00\" />\n            </div>\n            <div className=\"form-control\">\n            <label>{formRegister.interval.endDate.label}</label>\n                    <input type=\"datetime-local\" onChange={this.handleEndDateChange} name={formRegister.interval.endDate.inputName} id={formRegister.interval.endDate.inputName} value={endDate} />\n            </div>\n    </div>)\n  \n    }\n\n    render() {\n\n        const { formRegister, isInfinite, name, description } = this.state\n\n        const dateInterval = this.formInterval()\n\n        return (\n              \n            <Fragment>\n                <Main {...headerProps}>\n                <Toast message={this.state.toastMessage} time={3000} ref={this.child}/>\n                    <form>\n                        <div className=\"form-control\">\n                            <label>{formRegister.name.label}</label>\n                            <input id={formRegister.name.inputName} name={formRegister.name.inputName} onChange={this.handleTaskNameChange} type=\"text\" value={name} maxLength={formRegister.name.maxLength} />\n                        </div>\n                        <div className=\"form-control\">\n                            <label>{formRegister.description.description}</label>\n                            <textarea name={formRegister.description.inputName} onChange={this.handleTaskDescriptionChange} id={formRegister.description.inputName} rows=\"20\" cols=\"50\" maxlength={formRegister.description.maxLength}>{description}</textarea>\n                        </div>\n                        <div className=\"form-control\">\n                            <label>{formRegister.infinite.label}</label>\n                            <input onChange={this.handleToggleCheck} value={isInfinite} id={formRegister.infinite.inputName} name={formRegister.infinite.inputName} type=\"checkbox\" />\n                        </div>\n                         {isInfinite && dateInterval}\n                        <div className=\"d-flex  flex-row-reverse\">\n                            <button onClick={e=>this.handleSubmit(e)}>{formRegister.submitButton}</button>\n                        </div>\n                    </form>\n                </Main>\n            </Fragment>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}