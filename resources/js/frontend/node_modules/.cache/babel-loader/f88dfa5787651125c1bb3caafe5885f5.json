{"ast":null,"code":"var _jsxFileName = \"/home/ivanferrer/projetos/task-users/frontend/task-users/src/maintasks/TaskApp.jsx\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './TaskApp.scss';\nimport React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom'; //      {HashRouter} faz a mesma navegação usando # \n\nimport Routes from './Routes';\nimport Logo from '../components/templates/Logo';\nimport Footer from '../components/templates/Footer';\nimport Nav from '../components/templates/Nav';\nimport Overlay from '../components/templates/Overlay';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrlBackend = 'http://local.tasks.com.br/backend';\nexport default class TaskApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connection: \"Disconnected\",\n      connectionDescription: \"Connecting...\",\n      setConnection: this.setConnection.bind(this),\n      nextConnectionTry: 0,\n      authenticated: false\n    };\n  }\n\n  setConnection(connection, connectionDescription) {\n    //If connection is !== of Connected, overlay pop up (Check overlay component)\n    this.setState({\n      connection,\n      connectionDescription\n    });\n  }\n\n  componentDidMount() {\n    let token = localStorage.getItem('SessionToken');\n    var headers = {\n      'Authorization': `bearer ${token}`\n    };\n    axios.post(`${baseUrlBackend}auth`, '', {\n      headers: headers\n    }).then(response => {\n      //pass token as header\n      console.log(response);\n      this.setState({\n        connection: \"Connected\",\n        connectionDescription: \"Connected\",\n        authenticated: true\n      }); //Connected AND authenticated\n    }).catch(err => {\n      console.log(err);\n\n      if (err.response) {\n        if (err.response.status === 401) {\n          console.log('a');\n          this.setState({\n            connection: \"Connected\",\n            connectionDescription: \"Connected\",\n            authenticated: false\n          }); //Connected but not authenticated\n        } else {\n          console.log('b');\n          this.setState({\n            nextConnectionTry: 10,\n            connection: \"Disconnected\",\n            connectionDescription: \"Server offline\"\n          }); //not cnonnected\n        }\n      } else this.setState({\n        nextConnectionTry: 10,\n        connection: \"Disconnected\",\n        connectionDescription: \"Server offline\"\n      }); //Server offline\n\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-app\",\n        children: [/*#__PURE__*/_jsxDEV(Overlay, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Nav, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Routes, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ivanferrer/projetos/task-users/frontend/task-users/src/maintasks/TaskApp.jsx"],"names":["React","Component","BrowserRouter","Routes","Logo","Footer","Nav","Overlay","axios","baseUrlBackend","TaskApp","constructor","props","state","connection","connectionDescription","setConnection","bind","nextConnectionTry","authenticated","setState","componentDidMount","token","localStorage","getItem","headers","post","then","response","console","log","catch","err","status","render"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport './TaskApp.scss'\nimport React, {Component} from 'react'\nimport {BrowserRouter} from 'react-router-dom'\n//      {HashRouter} faz a mesma navegação usando # \n\nimport Routes from './Routes'\nimport Logo from '../components/templates/Logo'\nimport Footer from '../components/templates/Footer'\nimport Nav from '../components/templates/Nav'\nimport Overlay from '../components/templates/Overlay'\nimport axios from 'axios'\n\nconst baseUrlBackend = 'http://local.tasks.com.br/backend'\n\nexport default class TaskApp extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            connection: \"Disconnected\",\n            connectionDescription: \"Connecting...\",\n            setConnection: this.setConnection.bind(this),\n            nextConnectionTry: 0,\n            authenticated: false\n        }\n    }\n    setConnection(connection, connectionDescription){ //If connection is !== of Connected, overlay pop up (Check overlay component)\n        this.setState({connection, connectionDescription})\n    }\n\n    componentDidMount(){\n        let token = localStorage.getItem('SessionToken')\n        var headers = {\n            'Authorization': `bearer ${token}`\n        }\n        axios.post(`${baseUrlBackend}auth`,'', {headers: headers} ).then(response => {//pass token as header\n            console.log(response)\n            this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated: true} )//Connected AND authenticated\n        }).catch(err => {\n            console.log(err)\n            if(err.response){\n                if(err.response.status === 401){\n                    console.log('a')\n                    this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n                }else{\n                    console.log('b')\n                    this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n                }\n            }else\n            this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n        })\n    }\n  \n    render(){\n        return(\n        <BrowserRouter>\n            <div className=\"task-app\">\n                <Overlay {...this.state}/>\n                <Logo />\n                <Nav {...this.state}/>\n                <Routes {...this.state}/>\n                <Footer />\n            </div>\n        </BrowserRouter>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}