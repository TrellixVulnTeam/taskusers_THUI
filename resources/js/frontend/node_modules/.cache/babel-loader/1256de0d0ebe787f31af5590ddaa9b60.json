{"ast":null,"code":"var _jsxFileName = \"/home/ivanferrer/projetos/task-users/frontend/task-users/src/maintasks/TaskApp.jsx\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './TaskApp.scss';\nimport React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom'; //      {HashRouter} faz a mesma navegação usando # \n\nimport Routes from './Routes';\nimport Logo from '../components/templates/Logo';\nimport Footer from '../components/templates/Footer';\nimport Nav from '../components/templates/Nav';\nimport Overlay from '../components/templates/Overlay';\nimport axios from 'axios';\nimport baseUrlBacked from '../config/base_url.json';\nimport Toast from '../components/utils/Toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrl = `${baseUrlBacked}`;\nexport default class TaskApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newToast = message => {\n      this.setState({\n        toastMessage: message\n      });\n      this.child.current.show();\n    };\n\n    this.state = {\n      // connection: \"Disconnected\",\n      // connectionDescription: \"Connecting...\",\n      // setConnection: this.setConnection.bind(this),\n      // nextConnectionTry: 0,\n      // authenticated: false,\n      isFinite: true,\n      listTasks: [],\n      listUsers: []\n    };\n  }\n\n  setConnection(connection, connectionDescription) {\n    //If connection is !== of Connected, overlay pop up (Check overlay component)\n    this.setState({\n      connection,\n      connectionDescription\n    });\n  }\n\n  componentDidMount() {\n    // let token = localStorage.getItem('SessionToken')\n    // var headers = {\n    //     'Authorization': `bearer ${token}`\n    // }\n    axios.post(`${baseUrlBackend}all-lists`, '').then(response => {\n      this.setState({\n        listTasks: response.data.listTasks\n      });\n      this.setState({\n        listUsers: response.data.listUsers\n      });\n    }).catch(err => {\n      if (err.response) {\n        if (err.response.status === 401) {\n          this.newToast('Problemas na requisição');\n        } else {\n          this.newToast('Ocorreu um erro de conexão');\n        }\n      } //             console.log('a')\n      //             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n      //         }else{\n      //             console.log('b')\n      //             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n      //         }\n      //     }else\n      //     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n      // })\n\n    }); // axios.post(`${baseUrlBackend}auth`,'', {headers: headers} ).then(response => {//pass token as header\n    //     console.log(response)\n    //     this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated: true} )//Connected AND authenticated\n    // }).catch(err => {\n    //     console.log(err)\n    //     if(err.response){\n    //         if(err.response.status === 401){\n    //             console.log('a')\n    //             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n    //         }else{\n    //             console.log('b')\n    //             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n    //         }\n    //     }else\n    //     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n    // })\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-app\",\n        children: [/*#__PURE__*/_jsxDEV(Overlay, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Nav, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Routes, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ivanferrer/projetos/task-users/frontend/task-users/src/maintasks/TaskApp.jsx"],"names":["React","Component","BrowserRouter","Routes","Logo","Footer","Nav","Overlay","axios","baseUrlBacked","Toast","baseUrl","TaskApp","constructor","props","newToast","message","setState","toastMessage","child","current","show","state","isFinite","listTasks","listUsers","setConnection","connection","connectionDescription","componentDidMount","post","baseUrlBackend","then","response","data","catch","err","status","render"],"mappings":";AAAA,OAAO,sCAAP;AACA,OAAO,uCAAP;AACA,OAAO,gBAAP;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,aAAR,QAA4B,kBAA5B,C,CACA;;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,KAAP,MAAkB,2BAAlB;;AAEA,MAAMC,OAAO,GAAI,GAAEF,aAAc,EAAjC;AAEA,eAAe,MAAMG,OAAN,SAAsBX,SAAtB,CAAgC;AAC3CY,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAkBlBC,QAlBkB,GAkBNC,OAAD,IAAa;AACpB,WAAKC,QAAL,CAAc;AAACC,QAAAA,YAAY,EAACF;AAAd,OAAd;AACA,WAAKG,KAAL,CAAWC,OAAX,CAAmBC,IAAnB;AACH,KArBiB;;AAEd,SAAKC,KAAL,GAAa;AACT;AACA;AACA;AACA;AACA;AAEAC,MAAAA,QAAQ,EAAC,IAPA;AAQTC,MAAAA,SAAS,EAAC,EARD;AASTC,MAAAA,SAAS,EAAC;AATD,KAAb;AAWH;;AACDC,EAAAA,aAAa,CAACC,UAAD,EAAaC,qBAAb,EAAmC;AAAE;AAC9C,SAAKX,QAAL,CAAc;AAACU,MAAAA,UAAD;AAAaC,MAAAA;AAAb,KAAd;AACH;;AAODC,EAAAA,iBAAiB,GAAE;AACf;AACA;AACA;AACA;AACArB,IAAAA,KAAK,CAACsB,IAAN,CAAY,GAAEC,cAAe,WAA7B,EAAyC,EAAzC,EACCC,IADD,CACMC,QAAQ,IAAI;AACd,WAAKhB,QAAL,CAAc;AACVO,QAAAA,SAAS,EAACS,QAAQ,CAACC,IAAT,CAAcV;AADd,OAAd;AAGA,WAAKP,QAAL,CAAc;AACVQ,QAAAA,SAAS,EAACQ,QAAQ,CAACC,IAAT,CAAcT;AADd,OAAd;AAGH,KARD,EAQGU,KARH,CAQSC,GAAG,IAAI;AAEZ,UAAGA,GAAG,CAACH,QAAP,EAAgB;AACb,YAAIG,GAAG,CAACH,QAAJ,CAAaI,MAAb,KAAwB,GAA5B,EAAgC;AAC7B,eAAKtB,QAAL,CAAc,yBAAd;AACF,SAFD,MAEO;AACJ,eAAKA,QAAL,CAAc,4BAAd;AACF;AACH,OARW,CASR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEP,KA3BD,EALe,CAiCf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDuB,EAAAA,MAAM,GAAE;AACJ,wBACA,QAAC,aAAD;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACI,QAAC,OAAD,OAAa,KAAKhB;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,GAAD,OAAS,KAAKA;AAAd;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,MAAD,OAAY,KAAKA;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAWH;;AAvF0C","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport './TaskApp.scss'\nimport React, {Component} from 'react'\nimport {BrowserRouter} from 'react-router-dom'\n//      {HashRouter} faz a mesma navegação usando # \n\nimport Routes from './Routes'\nimport Logo from '../components/templates/Logo'\nimport Footer from '../components/templates/Footer'\nimport Nav from '../components/templates/Nav'\nimport Overlay from '../components/templates/Overlay'\nimport axios from 'axios'\nimport baseUrlBacked from '../config/base_url.json'\nimport Toast from '../components/utils/Toast'\n\nconst baseUrl = `${baseUrlBacked}`\n\nexport default class TaskApp extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            // connection: \"Disconnected\",\n            // connectionDescription: \"Connecting...\",\n            // setConnection: this.setConnection.bind(this),\n            // nextConnectionTry: 0,\n            // authenticated: false,\n\n            isFinite:true,\n            listTasks:[],\n            listUsers:[]\n        }\n    }\n    setConnection(connection, connectionDescription){ //If connection is !== of Connected, overlay pop up (Check overlay component)\n        this.setState({connection, connectionDescription})\n    }\n\n    newToast = (message) => {\n        this.setState({toastMessage:message})\n        this.child.current.show();\n    };\n\n    componentDidMount(){\n        // let token = localStorage.getItem('SessionToken')\n        // var headers = {\n        //     'Authorization': `bearer ${token}`\n        // }\n        axios.post(`${baseUrlBackend}all-lists`, '')\n        .then(response => {\n            this.setState({\n                listTasks:response.data.listTasks\n            })\n            this.setState({\n                listUsers:response.data.listUsers\n            })\n        }).catch(err => {\n\n            if(err.response){\n               if (err.response.status === 401){\n                  this.newToast('Problemas na requisição')\n               } else {\n                  this.newToast('Ocorreu um erro de conexão') \n               }\n            }\n                //             console.log('a')\n                //             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n                //         }else{\n                //             console.log('b')\n                //             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n                //         }\n                //     }else\n                //     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n                // })\n\n        })\n        // axios.post(`${baseUrlBackend}auth`,'', {headers: headers} ).then(response => {//pass token as header\n        //     console.log(response)\n        //     this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated: true} )//Connected AND authenticated\n        // }).catch(err => {\n        //     console.log(err)\n        //     if(err.response){\n        //         if(err.response.status === 401){\n        //             console.log('a')\n        //             this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n        //         }else{\n        //             console.log('b')\n        //             this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n        //         }\n        //     }else\n        //     this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n        // })\n    }\n  \n    render(){\n        return(\n        <BrowserRouter>\n            <div className=\"task-app\">\n                <Overlay {...this.state}/>\n                <Logo />\n                <Nav {...this.state}/>\n                <Routes {...this.state}/>\n                <Footer />\n            </div>\n        </BrowserRouter>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}