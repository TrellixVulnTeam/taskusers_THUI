{"ast":null,"code":"var _jsxFileName = \"/home/ivanferrer/projetos/task-users/frontend/task-users/src/components/registers/TaskRegister.jsx\";\nimport './TaskRegister.scss';\nimport React, { Component, Fragment, createRef } from 'react';\nimport Main from '../templates/Main';\nimport axios from 'axios';\nimport Toast from '../utils/Toast';\nimport baseUrl from '../../config/baseUrl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrlBackend = `${baseUrl.baseUrlBackend}`;\nconst headerProps = {\n  icon: 'sign-in',\n  title: 'Registrar',\n  subtitle: 'Você precisa estar logado para acessar o sistema.'\n};\nexport default class TaskRegister extends Component {\n  constructor(props) {\n    super(props);\n\n    this.newToast = message => {\n      this.setState({\n        toastMessage: message\n      }, () => {\n        this.child.current.show();\n      });\n    };\n\n    this.child = /*#__PURE__*/createRef();\n    this.state = {\n      name: props.name || '',\n      description: props.description || '',\n      startDate: props.startDate || new Date().toLocaleString(),\n      endDate: props.endDate || this.addDays(new Date(), 10),\n      isInfinite: true,\n      toastMessage: \"false\",\n      form: {\n        name: {\n          label: \"Título da tarefa\",\n          inputName: \"task\",\n          maxLength: 45\n        },\n        description: {\n          label: \"Descrição da tarefa\",\n          inputName: \"description\",\n          maxLength: 1000\n        },\n        infinite: {\n          label: \"Infinito\",\n          inputName: \"infinite\"\n        },\n        interval: {\n          startDate: {\n            label: \"Data inicial\",\n            inputName: \"start_date\"\n          },\n          endDate: {\n            label: \"Data final\",\n            inputName: \"end_date\"\n          }\n        },\n        submitButton: \"Cadastrar\"\n      }\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (this.state.name && this.state.name !== '') {\n      if (!this.state.isInfinite) {\n        if (!this.state.startDate) {\n          this.newToast(\"A data inicial precisa ser registrada.\");\n        }\n\n        if (!this.state.endDate) {\n          this.newToast(\"A data final precisa ser registrada.\");\n        }\n\n        if (this.state.startDate && this.state.startDate) {\n          if (new Date(this.state.startDate).getTime() > new Date(this.state.endDate).getTime()) {\n            this.newToast(\"A data final precisa ser maior que a data inicial.\");\n          }\n        }\n      }\n\n      let task = {\n        name: this.state.name,\n        descriṕtion: this.state.description,\n        isInfinite: this.state.isInfinite,\n        endDate: this.state.startDate,\n        startDate: this.state.endDate\n      };\n      console.log(`${baseUrlBackend}/register-task`);\n      axios.post(`${baseUrlBackend}/register-task`, task).then(resp => {\n        localStorage.setItem('SessionToken', resp.data.token);\n        this.newToast(\"Tarefa cadastrada com sucesso!\");\n        window.location.href = \"/home\";\n      }).catch(err => {\n        console.log(err.response.status);\n\n        switch (err.response.status) {\n          case 409:\n            this.newToast(\"Tarefa já cadastrada!\");\n            break;\n\n          default:\n            this.newToast(\"Ocorreu um erro com o servidor, tente novamente mais tarde.\");\n        }\n      });\n    } else {\n      if (!this.state.password || !this.state.username || !this.state.email) {\n        this.newToast(\"Todos os campos devem ser preenchidos.\");\n      } else {\n        this.newToast(\"Existem campos inválidos.\");\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      isInfinite: true\n    });\n    console.log('startdate', this.state.startDate);\n  }\n\n  handleToggleCheck() {\n    this.setState({\n      isInfinite: !this.state.isInfinite\n    });\n  }\n\n  addDays(date, days) {\n    var result = new Date(date).toLocaleString();\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  formInterval() {\n    const {\n      form\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: form.interval.startDate.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          name: form.interval.startDate.inputName,\n          id: form.interval.startDate.inputName,\n          value: this.state.startDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: form.interval.endDate.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"datetime-local\",\n          name: form.interval.endDate.inputName,\n          id: form.interval.endDate.inputName,\n          value: this.state.endDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 22\n    }, this);\n  }\n\n  render() {\n    const {\n      form,\n      name,\n      description,\n      isInfinite\n    } = this.state;\n    const dateInterval = this.formInterval();\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Main, { ...headerProps,\n        children: [/*#__PURE__*/_jsxDEV(Toast, {\n          message: this.state.toastMessage,\n          time: 3000,\n          ref: this.child\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: form.name.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: form.name.inputName,\n              name: form.name.inputName,\n              type: \"text\",\n              value: name,\n              maxLength: form.name.maxLength\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: form.description.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: form.description.inputName,\n              id: form.description.inputName,\n              rows: \"20\",\n              cols: \"50\",\n              maxlength: form.description.maxLength,\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: form.infinite.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              onChange: this.handleToggleCheck,\n              defaultChecked: isInfinite,\n              id: form.infinite.inputName,\n              name: form.infinite.inputName,\n              type: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), isInfinite && dateInterval, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex  flex-row-reverse\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => this.handleSubmit(e),\n              children: form.submitButton\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ivanferrer/projetos/task-users/frontend/task-users/src/components/registers/TaskRegister.jsx"],"names":["React","Component","Fragment","createRef","Main","axios","Toast","baseUrl","baseUrlBackend","headerProps","icon","title","subtitle","TaskRegister","constructor","props","newToast","message","setState","toastMessage","child","current","show","state","name","description","startDate","Date","toLocaleString","endDate","addDays","isInfinite","form","label","inputName","maxLength","infinite","interval","submitButton","handleSubmit","e","preventDefault","getTime","task","descriṕtion","console","log","post","then","resp","localStorage","setItem","data","token","window","location","href","catch","err","response","status","password","username","email","componentDidMount","handleToggleCheck","date","days","result","setDate","getDate","formInterval","render","dateInterval"],"mappings":"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","sourcesContent":["import './TaskRegister.scss'\nimport React, {Component, Fragment, createRef} from 'react'\nimport Main from '../templates/Main'\nimport axios from 'axios'\nimport Toast from '../utils/Toast';\nimport baseUrl from '../../config/baseUrl'\n\nconst baseUrlBackend = `${baseUrl.baseUrlBackend}`\n\nconst headerProps = {\n    icon: 'sign-in',\n    title: 'Registrar',\n    subtitle: 'Você precisa estar logado para acessar o sistema.',\n}\n\nexport default class TaskRegister extends Component {\n    constructor(props) {\n        super(props)\n\n        this.child = createRef()\n\n        this.state = {\n            name: props.name || '',\n            description: props.description || '',\n            startDate: props.startDate || new Date().toLocaleString(),\n            endDate: props.endDate || this.addDays(new Date(), 10),\n            isInfinite: true,\n            toastMessage:\"false\",\n            form:{\n                name:{\n                    label:\"Título da tarefa\",\n                    inputName:\"task\",\n                    maxLength:45\n                },\n                description:{\n                    label:\"Descrição da tarefa\",\n                    inputName:\"description\",\n                    maxLength:1000\n                },\n                infinite:{\n                    label: \"Infinito\",\n                    inputName:\"infinite\"\n                },\n                interval:{\n                    startDate:{\n                        label:\"Data inicial\",\n                        inputName:\"start_date\"\n                    },\n                    endDate:{\n                        label: \"Data final\",\n                        inputName: \"end_date\"\n                    }\n                },\n                submitButton:\"Cadastrar\"\n\n            }\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault()\n        if(this.state.name && this.state.name !== '') {\n\n            if(!this.state.isInfinite) {\n                if(!this.state.startDate) {\n                    this.newToast(\"A data inicial precisa ser registrada.\")\n                }\n                if(!this.state.endDate) {\n                    this.newToast(\"A data final precisa ser registrada.\")\n                }\n                if(this.state.startDate && this.state.startDate) {\n                    if(new Date(this.state.startDate).getTime() > new Date(this.state.endDate).getTime()) {\n                        this.newToast(\"A data final precisa ser maior que a data inicial.\")\n                    }\n                }\n            }\n\n            let task = {\n                name:this.state.name,\n                descriṕtion:this.state.description,\n                isInfinite:this.state.isInfinite,\n                endDate:this.state.startDate,\n                startDate:this.state.endDate\n                                 \n            }\n            console.log(`${baseUrlBackend}/register-task`)\n            axios.post(`${baseUrlBackend}/register-task`,task).then(resp =>{\n                localStorage.setItem('SessionToken', resp.data.token)\n                this.newToast(\"Tarefa cadastrada com sucesso!\")\n                window.location.href = \"/home\"\n            }).catch(err => {\n                console.log(err.response.status)\n                switch(err.response.status){\n                    case 409: this.newToast(\"Tarefa já cadastrada!\");break\n                    default:  this.newToast(\"Ocorreu um erro com o servidor, tente novamente mais tarde.\")\n                }\n            })\n        }else{\n            if(!this.state.password || !this.state.username || !this.state.email){\n                this.newToast(\"Todos os campos devem ser preenchidos.\")\n            }else{\n                this.newToast(\"Existem campos inválidos.\")\n            }\n        }\n\n    }\n\n    componentDidMount() {\n        this.setState({isInfinite:true})\n        console.log('startdate',this.state.startDate)\n    }\n\n    handleToggleCheck() {\n       this.setState({\n           isInfinite:!this.state.isInfinite\n       })\n    }\n\n    addDays(date, days) {\n        var result = new Date(date).toLocaleString();\n        result.setDate(result.getDate() + days);\n        return result;\n    }\n\n    newToast = (message) => {\n        this.setState({toastMessage:message}, () => {\n            this.child.current.show()\n        })\n        \n    }\n\n    formInterval() {\n        const { form } = this.state\n            return  (<div>\n            <div className=\"form-control\">\n            <label>{form.interval.startDate.label}</label>\n                    <input type=\"datetime-local\" name={form.interval.startDate.inputName} id={form.interval.startDate.inputName} value={this.state.startDate} />\n            </div>\n            <div className=\"form-control\">\n            <label>{form.interval.endDate.label}</label>\n                    <input type=\"datetime-local\" name={form.interval.endDate.inputName} id={form.interval.endDate.inputName} value={this.state.endDate} />\n            </div>\n    </div>)\n  \n    }\n\n    render() {\n\n        const { form, name, description, isInfinite } = this.state\n\n        const dateInterval = this.formInterval()\n\n        return (\n              \n            <Fragment>\n                <Main {...headerProps}>\n                <Toast message={this.state.toastMessage} time={3000} ref={this.child}/>\n                    <form>\n                        <div className=\"form-control\">\n                            <label>{form.name.label}</label>\n                            <input id={form.name.inputName} name={form.name.inputName} type=\"text\" value={name} maxLength={form.name.maxLength} />\n                        </div>\n                        <div className=\"form-control\">\n                            <label>{form.description.description}</label>\n                            <textarea name={form.description.inputName} id={form.description.inputName} rows=\"20\" cols=\"50\" maxlength={form.description.maxLength}>{description}</textarea>\n                        </div>\n                        <div className=\"form-control\">\n                            <label>{form.infinite.label}</label>\n                            <input onChange={this.handleToggleCheck} defaultChecked={isInfinite} id={form.infinite.inputName} name={form.infinite.inputName} type=\"checkbox\" />\n                        </div>\n                         {isInfinite && dateInterval}\n                        <div className=\"d-flex  flex-row-reverse\">\n                            <button onClick={e=>this.handleSubmit(e)}>{form.submitButton}</button>\n                        </div>\n                    </form>\n                </Main>\n            </Fragment>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}