{"ast":null,"code":"var _jsxFileName = \"/home/ivanferrer/projetos/task-users/frontend/task-users/src/maintasks/TaskApp.jsx\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './TaskApp.scss';\nimport React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom'; //      {HashRouter} faz a mesma navegação usando # \n\nimport Routes from './Routes';\nimport Logo from '../components/templates/Logo';\nimport Footer from '../components/templates/Footer';\nimport Nav from '../components/templates/Nav';\nimport Overlay from '../components/templates/Overlay';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseUrlBackend = 'http://local.tasks.com.br/backend';\nexport default class TaskApp extends Component {\n  constructor(props) {\n    super(props); // this.state = {\n    //     connection: \"Disconnected\",\n    //     connectionDescription: \"Connecting...\",\n    //     setConnection: this.setConnection.bind(this),\n    //     nextConnectionTry: 0,\n    //     authenticated: false\n    // }\n  } // setConnection(connection, connectionDescription){ //If connection is !== of Connected, overlay pop up (Check overlay component)\n  //     this.setState({connection, connectionDescription})\n  // }\n  // componentDidMount(){\n  //     let token = localStorage.getItem('SessionToken')\n  //     var headers = {\n  //         'Authorization': `bearer ${token}`\n  //     }\n  //     axios.post(`${baseUrlBackend}auth`,'', {headers: headers} ).then(response => {//pass token as header\n  //         console.log(response)\n  //         this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated: true} )//Connected AND authenticated\n  //     }).catch(err => {\n  //         console.log(err)\n  //         if(err.response){\n  //             if(err.response.status === 401){\n  //                 console.log('a')\n  //                 this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n  //             }else{\n  //                 console.log('b')\n  //                 this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n  //             }\n  //         }else\n  //         this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n  //     })\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-app\",\n        children: [/*#__PURE__*/_jsxDEV(Overlay, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Nav, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Routes, { ...this.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/ivanferrer/projetos/task-users/frontend/task-users/src/maintasks/TaskApp.jsx"],"names":["React","Component","BrowserRouter","Routes","Logo","Footer","Nav","Overlay","axios","baseUrlBackend","TaskApp","constructor","props","render","state"],"mappings":";AAAA,OAAO,sCAAP;AACA,OAAO,uCAAP;AACA,OAAO,gBAAP;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,aAAR,QAA4B,kBAA5B,C,CACA;;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,8BAAjB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAc,GAAG,mCAAvB;AAEA,eAAe,MAAMC,OAAN,SAAsBT,SAAtB,CAAgC;AAC3CU,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN,EADc,CAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAV0C,CAW3C;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAE;AACJ,wBACA,QAAC,aAAD;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACI,QAAC,OAAD,OAAa,KAAKC;AAAlB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,GAAD,OAAS,KAAKA;AAAd;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,MAAD,OAAY,KAAKA;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADA;AAWH;;AAlD0C","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport './TaskApp.scss'\nimport React, {Component} from 'react'\nimport {BrowserRouter} from 'react-router-dom'\n//      {HashRouter} faz a mesma navegação usando # \n\nimport Routes from './Routes'\nimport Logo from '../components/templates/Logo'\nimport Footer from '../components/templates/Footer'\nimport Nav from '../components/templates/Nav'\nimport Overlay from '../components/templates/Overlay'\nimport axios from 'axios'\n\nconst baseUrlBackend = 'http://local.tasks.com.br/backend'\n\nexport default class TaskApp extends Component {\n    constructor(props){\n        super(props)\n        // this.state = {\n        //     connection: \"Disconnected\",\n        //     connectionDescription: \"Connecting...\",\n        //     setConnection: this.setConnection.bind(this),\n        //     nextConnectionTry: 0,\n        //     authenticated: false\n        // }\n    }\n    // setConnection(connection, connectionDescription){ //If connection is !== of Connected, overlay pop up (Check overlay component)\n    //     this.setState({connection, connectionDescription})\n    // }\n\n    // componentDidMount(){\n    //     let token = localStorage.getItem('SessionToken')\n    //     var headers = {\n    //         'Authorization': `bearer ${token}`\n    //     }\n    //     axios.post(`${baseUrlBackend}auth`,'', {headers: headers} ).then(response => {//pass token as header\n    //         console.log(response)\n    //         this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated: true} )//Connected AND authenticated\n    //     }).catch(err => {\n    //         console.log(err)\n    //         if(err.response){\n    //             if(err.response.status === 401){\n    //                 console.log('a')\n    //                 this.setState( {connection:\"Connected\", connectionDescription:\"Connected\", authenticated:false} )//Connected but not authenticated\n    //             }else{\n    //                 console.log('b')\n    //                 this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//not cnonnected\n    //             }\n    //         }else\n    //         this.setState({nextConnectionTry: 10, connection:\"Disconnected\", connectionDescription:\"Server offline\"})//Server offline\n    //     })\n    // }\n  \n    render(){\n        return(\n        <BrowserRouter>\n            <div className=\"task-app\">\n                <Overlay {...this.state}/>\n                <Logo />\n                <Nav {...this.state}/>\n                <Routes {...this.state}/>\n                <Footer />\n            </div>\n        </BrowserRouter>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}